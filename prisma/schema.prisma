// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  userName     String       @unique @map("user_name")
  password     String
  disabled     Boolean      @default(false)
  deleted      Boolean      @default(false)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  profile      Profile?
  role_in_user RoleInUser[]

  @@map("users")
}

enum Gender {
  MA
  FE
}

model Profile {
  id          Int       @id @default(autoincrement())
  nickName    String?   @map("nick_name")
  avatar      String?
  email       String?
  phone       String?
  gender      Gender    @default(MA)
  birthday    DateTime?
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String    @unique

  @@map("profiles")
}

model Role {
  id                 Int                @id @default(autoincrement())
  name               String             @unique
  description        String?
  disabled           Boolean            @default(false)
  deleted            Boolean            @default(false)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  role_in_permission RoleInPermission[]
  role_in_user       RoleInUser[]

  @@map("roles")
}

model RoleInUser {
  role_id Int
  user_id String
  roles   Role   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users   User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([role_id, user_id], map: "role_id_user_id_unique")
  @@map("role_in_user")
}

enum MenuType {
  DIRECTORY
  MENU
  BUTTON
}

model Permission {
  id                 Int                @id @default(autoincrement())
  pid                Int                @default(0)
  type               MenuType           @default(MENU)
  name               String             @unique
  permission         String?             
  icon               String?
  path               String?
  component          String?
  redirect           String?
  disabled           Boolean            @default(false)
  hidden             Boolean            @default(false)
  cache              Boolean            @default(false)
  props              Boolean            @default(false)
  deleted            Boolean            @default(false)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  role_in_permission RoleInPermission[]

  @@map("permissions")
}

model RoleInPermission {
  role_id       Int
  permission_id Int
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles         Role       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([role_id, permission_id], map: "permission_id_role_id_unique")
  @@map("role_in_permission")
}
